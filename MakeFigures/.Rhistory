library(devtools)
library(yeastRNASeqRisso2011)
library(EDASeq)
library(DESeq)
library(RCurl)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(GGally)
library(bigPint)
library(gridExtra)
library(cowplot)
install_github("drisso/yeastRNASeqRisso2011")
source("functions.R")
# Read in three .rda files
githubURL <- "https://github.com/drisso/yeastRNASeqRisso2011/blob/master/data/"
load(url(paste0(githubURL, "geneLevelCounts.rda?raw=true")))
load(url(paste0(githubURL, "laneInfo.rda?raw=true")))
load(url(paste0(githubURL, "geneInfo.rda?raw=true")))
# Prepare data frame based on parameters from .rda files
data(yeastGC)
colnames(laneInfo)[2] <- "conditions"
means <- rowMeans(geneLevelCounts)
filter <- means >= 10
geneLevelCounts <- geneLevelCounts[filter,]
sub <- intersect(rownames(geneLevelCounts), names(yeastGC))
mat <- as.matrix(geneLevelCounts[sub, ])
data <- newSeqExpressionSet(mat, phenoData=laneInfo, featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub])))
# Run within and between normalization on data frame
dataWithin <- withinLaneNormalization(data, "gc", which="full", offset=FALSE)
dataNorm <- betweenLaneNormalization(dataWithin, which="median")
getwd()
setwd("~/Desktop/JDSPaper/MakeFigures")
source("functions.R")
rm(list=ls())
source("functions.R")
# Read in three .rda files
githubURL <- "https://github.com/drisso/yeastRNASeqRisso2011/blob/master/data/"
load(url(paste0(githubURL, "geneLevelCounts.rda?raw=true")))
load(url(paste0(githubURL, "laneInfo.rda?raw=true")))
load(url(paste0(githubURL, "geneInfo.rda?raw=true")))
# Prepare data frame based on parameters from .rda files
data(yeastGC)
colnames(laneInfo)[2] <- "conditions"
means <- rowMeans(geneLevelCounts)
filter <- means >= 10
geneLevelCounts <- geneLevelCounts[filter,]
sub <- intersect(rownames(geneLevelCounts), names(yeastGC))
mat <- as.matrix(geneLevelCounts[sub, ])
data <- newSeqExpressionSet(mat, phenoData=laneInfo, featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub])))
# Run within and between normalization on data frame
dataWithin <- withinLaneNormalization(data, "gc", which="full", offset=FALSE)
dataNorm <- betweenLaneNormalization(dataWithin, which="median")
counts <- as(dataWithin,"CountDataSet")
dataWithin <- as.data.frame(counts@assayData$counts)
counts <- as(dataNorm,"CountDataSet")
dataBetween <- as.data.frame(counts@assayData$counts)
dataWithin <- formatYeastDF(dataWithin)
dataWithin <- select(dataWithin, ID, Y1.1, Y1.2, Y4.1, Y4.2)
dataBetween <- formatYeastDF(dataBetween)
dataBetween <- select(dataBetween, ID, Y1.1, Y1.2, Y4.1, Y4.2)
# Use bigPint function to create scatterplot matrices showing within and between normalization
retWithin <- plotScatterStatic(dataWithin, option="point", pointSize = 0.1, saveFile = FALSE)
retWithin2 <- retWithin[["Y1_Y4"]] + theme(axis.text=element_text(size=8), strip.text = element_text(size = 7))
retBetween <- plotScatterStatic(dataBetween, option="point", pointSize = 0.1, saveFile = FALSE)
retBetween2 <- retBetween[["Y1_Y4"]] + theme(axis.text=element_text(size=8), strip.text = element_text(size = 7))
# Arrange two scatterplot matrices into grid
plot1 <- plot_grid(ggmatrix_gtable(retWithin2), labels=c("A"), ncol = 1, nrow = 1, label_size=9) + theme(plot.background = element_rect(size=0.1,linetype="solid",color="black"))
plot2 <- plot_grid(ggmatrix_gtable(retBetween2), labels=c("B"), ncol = 1, nrow = 1, label_size=9) + theme(plot.background = element_rect(size=0.1,linetype="solid",color="black"))
grid.arrange(plot1, plot2, ncol=1)
retBetween3 <- reBetween2 + scale_x_continuous(breaks= pretty_breaks())
retBetween3 <- retBetween2 + scale_x_continuous(breaks= pretty_breaks())
retBetween2 <- retBetween[["Y1_Y4"]] + theme(axis.text=element_text(size=8), strip.text = element_text(size = 7), scale_x_continuous(breaks= pretty_breaks()))
retBetween3 <- ggmatrix(retBetween2) + scale_x_continuous(breaks= pretty_breaks())
retBetween3 <- ggmatrix_gtable(retBetween2) + scale_x_continuous(breaks= pretty_breaks())
retBetween3 <- ggmatrix_gtable(retBetween2) + theme(scale_x_continuous(breaks= pretty_breaks()))
retBetween3 <- ggmatrix_gtable(retBetween2) + scale_x_continuous(breaks= pretty_breaks())
retBetween3 <- ggmatrix_gtable(retBetween2 + scale_x_continuous(breaks= pretty_breaks()))
class(retBetween2)
retBetween3 <- ggplot_build(retBetween2) + scale_x_continuous(breaks= pretty_breaks())
retBetween3 <- ggplot(retBetween2) + scale_x_continuous(breaks= pretty_breaks())
rm(ist=ls())
rm(list=ls())
dev.off()
dev.off()
source("functions.R")
# Read in three .rda files
githubURL <- "https://github.com/drisso/yeastRNASeqRisso2011/blob/master/data/"
load(url(paste0(githubURL, "geneLevelCounts.rda?raw=true")))
load(url(paste0(githubURL, "laneInfo.rda?raw=true")))
load(url(paste0(githubURL, "geneInfo.rda?raw=true")))
# Prepare data frame based on parameters from .rda files
data(yeastGC)
colnames(laneInfo)[2] <- "conditions"
means <- rowMeans(geneLevelCounts)
filter <- means >= 10
geneLevelCounts <- geneLevelCounts[filter,]
sub <- intersect(rownames(geneLevelCounts), names(yeastGC))
mat <- as.matrix(geneLevelCounts[sub, ])
data <- newSeqExpressionSet(mat, phenoData=laneInfo, featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub])))
# Run within and between normalization on data frame
dataWithin <- withinLaneNormalization(data, "gc", which="full", offset=FALSE)
dataNorm <- betweenLaneNormalization(dataWithin, which="median")
counts <- as(dataWithin,"CountDataSet")
dataWithin <- as.data.frame(counts@assayData$counts)
counts <- as(dataNorm,"CountDataSet")
dataBetween <- as.data.frame(counts@assayData$counts)
dataWithin <- formatYeastDF(dataWithin)
dataWithin <- select(dataWithin, ID, Y1.1, Y1.2, Y4.1, Y4.2)
dataBetween <- formatYeastDF(dataBetween)
dataBetween <- select(dataBetween, ID, Y1.1, Y1.2, Y4.1, Y4.2)
# Use bigPint function to create scatterplot matrices showing within and between normalization
retWithin <- plotScatterStatic(dataWithin, option="point", pointSize = 0.1, saveFile = FALSE)
retWithin2 <- retWithin[["Y1_Y4"]] + theme(axis.text=element_text(size=8), strip.text = element_text(size = 7))
retBetween <- plotScatterStatic(dataBetween, option="point", pointSize = 0.1, saveFile = FALSE)
retBetween2 <- retBetween[["Y1_Y4"]] + theme(axis.text=element_text(size=8), strip.text = element_text(size = 7))
# Arrange two scatterplot matrices into grid
plot1 <- plot_grid(ggmatrix_gtable(retWithin2), labels=c("A"), ncol = 1, nrow = 1, label_size=9) + theme(plot.background = element_rect(size=0.1,linetype="solid",color="black"))
plot2 <- plot_grid(ggmatrix_gtable(retBetween2), labels=c("B"), ncol = 1, nrow = 1, label_size=9) + theme(plot.background = element_rect(size=0.1,linetype="solid",color="black"))
grid.arrange(plot1, plot2, ncol=1)
dev.off()
dev.off()
getwd()
rm(list=ls())
dev.off()
source("functions.R")
# Read in three .rda files
githubURL <- "https://github.com/drisso/yeastRNASeqRisso2011/blob/master/data/"
load(url(paste0(githubURL, "geneLevelCounts.rda?raw=true")))
load(url(paste0(githubURL, "laneInfo.rda?raw=true")))
load(url(paste0(githubURL, "geneInfo.rda?raw=true")))
# Prepare data frame based on parameters from .rda files
data(yeastGC)
colnames(laneInfo)[2] <- "conditions"
means <- rowMeans(geneLevelCounts)
filter <- means >= 10
geneLevelCounts <- geneLevelCounts[filter,]
sub <- intersect(rownames(geneLevelCounts), names(yeastGC))
mat <- as.matrix(geneLevelCounts[sub, ])
data <- newSeqExpressionSet(mat, phenoData=laneInfo, featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub])))
# Run within and between normalization on data frame
dataWithin <- withinLaneNormalization(data, "gc", which="full", offset=FALSE)
dataNorm <- betweenLaneNormalization(dataWithin, which="median")
counts <- as(dataWithin,"CountDataSet")
dataWithin <- as.data.frame(counts@assayData$counts)
counts <- as(dataNorm,"CountDataSet")
dataBetween <- as.data.frame(counts@assayData$counts)
dataWithin <- formatYeastDF(dataWithin)
dataWithin <- select(dataWithin, ID, Y1.1, Y1.2, Y4.1, Y4.2)
dataBetween <- formatYeastDF(dataBetween)
dataBetween <- select(dataBetween, ID, Y1.1, Y1.2, Y4.1, Y4.2)
# Use bigPint function to create scatterplot matrices showing within and between normalization
retWithin <- plotScatterStatic(dataWithin, option="point", pointSize = 0.1, saveFile = FALSE)
retWithin2 <- retWithin[["Y1_Y4"]] + theme(axis.text=element_text(size=4), strip.text = element_text(size = 3))
retBetween <- plotScatterStatic(dataBetween, option="point", pointSize = 0.1, saveFile = FALSE)
retBetween2 <- retBetween[["Y1_Y4"]] + theme(axis.text=element_text(size=4), strip.text = element_text(size = 3))
# Arrange two scatterplot matrices into grid
plot1 <- plot_grid(ggmatrix_gtable(retWithin2), labels=c("A"), ncol = 1, nrow = 1, label_size=9) + theme(plot.background = element_rect(size=0.1,linetype="solid",color="black"))
plot2 <- plot_grid(ggmatrix_gtable(retBetween2), labels=c("B"), ncol = 1, nrow = 1, label_size=9) + theme(plot.background = element_rect(size=0.1,linetype="solid",color="black"))
grid.arrange(plot1, plot2, ncol=1)
dev.off()
dev.off()
rm(list=ls())
source("functions.R")
# Read in three .rda files
githubURL <- "https://github.com/drisso/yeastRNASeqRisso2011/blob/master/data/"
load(url(paste0(githubURL, "geneLevelCounts.rda?raw=true")))
load(url(paste0(githubURL, "laneInfo.rda?raw=true")))
load(url(paste0(githubURL, "geneInfo.rda?raw=true")))
# Prepare data frame based on parameters from .rda files
data(yeastGC)
colnames(laneInfo)[2] <- "conditions"
means <- rowMeans(geneLevelCounts)
filter <- means >= 10
geneLevelCounts <- geneLevelCounts[filter,]
sub <- intersect(rownames(geneLevelCounts), names(yeastGC))
mat <- as.matrix(geneLevelCounts[sub, ])
data <- newSeqExpressionSet(mat, phenoData=laneInfo, featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub])))
# Run within and between normalization on data frame
dataWithin <- withinLaneNormalization(data, "gc", which="full", offset=FALSE)
dataNorm <- betweenLaneNormalization(dataWithin, which="median")
counts <- as(dataWithin,"CountDataSet")
dataWithin <- as.data.frame(counts@assayData$counts)
counts <- as(dataNorm,"CountDataSet")
dataBetween <- as.data.frame(counts@assayData$counts)
dataWithin <- formatYeastDF(dataWithin)
dataWithin <- select(dataWithin, ID, Y1.1, Y1.2, Y4.1, Y4.2)
dataBetween <- formatYeastDF(dataBetween)
dataBetween <- select(dataBetween, ID, Y1.1, Y1.2, Y4.1, Y4.2)
# Use bigPint function to create scatterplot matrices showing within and between normalization
retWithin <- plotScatterStatic(dataWithin, option="point", pointSize = 0.1, saveFile = FALSE)
retWithin2 <- retWithin[["Y1_Y4"]] + theme(axis.text=element_text(size=6), strip.text = element_text(size = 5))
retBetween <- plotScatterStatic(dataBetween, option="point", pointSize = 0.1, saveFile = FALSE)
retBetween2 <- retBetween[["Y1_Y4"]] + theme(axis.text=element_text(size=6), strip.text = element_text(size = 5))
# Arrange two scatterplot matrices into grid
plot1 <- plot_grid(ggmatrix_gtable(retWithin2), labels=c("A"), ncol = 1, nrow = 1, label_size=9) + theme(plot.background = element_rect(size=0.1,linetype="solid",color="black"))
plot2 <- plot_grid(ggmatrix_gtable(retBetween2), labels=c("B"), ncol = 1, nrow = 1, label_size=9) + theme(plot.background = element_rect(size=0.1,linetype="solid",color="black"))
grid.arrange(plot1, plot2, ncol=1)
dev.off()
dev.off()
ls()
g <- ggplotGrob(retWithin2)
class(retWithin2)
retWithin2$heights[[3]] = unit(1,"in")
# Arrange two scatterplot matrices into grid
plot1 <- plot_grid(ggmatrix_gtable(retWithin2), labels=c("A"), ncol = 1, nrow = 1, label_size=9) + theme(plot.background = element_rect(size=0.1,linetype="solid",color="black"))
plot2 <- plot_grid(ggmatrix_gtable(retBetween2), labels=c("B"), ncol = 1, nrow = 1, label_size=9) + theme(plot.background = element_rect(size=0.1,linetype="solid",color="black"))
grid.arrange(plot1, plot2, ncol=1)
retWithin2$heights[[3]] = unit(0.6,"in")
# Arrange two scatterplot matrices into grid
plot1 <- plot_grid(ggmatrix_gtable(retWithin2), labels=c("A"), ncol = 1, nrow = 1, label_size=9) + theme(plot.background = element_rect(size=0.1,linetype="solid",color="black"))
plot2 <- plot_grid(ggmatrix_gtable(retBetween2), labels=c("B"), ncol = 1, nrow = 1, label_size=9) + theme(plot.background = element_rect(size=0.1,linetype="solid",color="black"))
grid.arrange(plot1, plot2, ncol=1)
retWithin2$heights[[3]] = unit(3,"in")
# Arrange two scatterplot matrices into grid
plot1 <- plot_grid(ggmatrix_gtable(retWithin2), labels=c("A"), ncol = 1, nrow = 1, label_size=9) + theme(plot.background = element_rect(size=0.1,linetype="solid",color="black"))
dev.off()
dev.off()
grid.arrange(plot1, plot2, ncol=1)
dev.off()
dev.off()
# Use bigPint function to create scatterplot matrices showing within and between normalization
retWithin <- plotScatterStatic(dataWithin, option="point", pointSize = 0.1, saveFile = FALSE)
retWithin2 <- retWithin[["Y1_Y4"]] + theme(axis.text=element_text(size=6), strip.text = element_text(size = 5, lineheight=0.5))
retBetween <- plotScatterStatic(dataBetween, option="point", pointSize = 0.1, saveFile = FALSE)
retBetween2 <- retBetween[["Y1_Y4"]] + theme(axis.text=element_text(size=6), strip.text = element_text(size = 5, lineheight=1))
# Arrange two scatterplot matrices into grid
plot1 <- plot_grid(ggmatrix_gtable(retWithin2), labels=c("A"), ncol = 1, nrow = 1, label_size=9) + theme(plot.background = element_rect(size=0.1,linetype="solid",color="black"))
plot2 <- plot_grid(ggmatrix_gtable(retBetween2), labels=c("B"), ncol = 1, nrow = 1, label_size=9) + theme(plot.background = element_rect(size=0.1,linetype="solid",color="black"))
grid.arrange(plot1, plot2, ncol=1)
